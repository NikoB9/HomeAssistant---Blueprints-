blueprint:
  name: Synchronize 4 Way (Switch & Light)
  description: >
    ## Bind Four switches or lights together to act in unison
    
    ðŸ”¥**Version**: v2.0
  source_url: https://github.com/NikoB9/HomeAssistant---Blueprints-.git
  domain: automation
  input:
    entity_1:
      name: Entity 1
      selector:
        entity:
          domain: switch,light
    entity_2:
      name: Entity 2
      selector:
        entity:
          domain: switch,light
    entity_3:
      name: Entity 3
      selector:
        entity:
          domain: switch,light
    entity_4:
      name: Entity 4
      selector:
        entity:
          domain: switch,light

variables:
  entity_1: !input entity_1
  entity_2: !input entity_2
  entity_3: !input entity_3
  entity_4: !input entity_4

trigger:
  - platform: state
    entity_id: 
      - !input entity_1
      - !input entity_2
      - !input entity_3
      - !input entity_4

mode: single

condition:
  '{{ trigger.to_state.state != trigger.from_state.state }}'

action:
  - choose:
      - conditions:
          - '{{ trigger.entity_id != entity_1 }}'
          - '{{ trigger.to_state.state != states(entity_1) }}'
        sequence:
          - service: >
              {% if trigger.to_state.state == "on" %}
                homeassistant.turn_on
              {% else %}
                homeassistant.turn_off
              {% endif %}
            entity_id: !input entity_1

  - choose:
      - conditions:
          - '{{ trigger.entity_id != entity_2 }}'
          - '{{ trigger.to_state.state != states(entity_2) }}'
        sequence:
          - service: >
              {% if trigger.to_state.state == "on" %}
                homeassistant.turn_on
              {% else %}
                homeassistant.turn_off
              {% endif %}
            entity_id: !input entity_2

  - choose:
      - conditions:
          - '{{ trigger.entity_id != entity_3 }}'
          - '{{ trigger.to_state.state != states(entity_3) }}'
        sequence:
          - service: >
              {% if trigger.to_state.state == "on" %}
                homeassistant.turn_on
              {% else %}
                homeassistant.turn_off
              {% endif %}
            entity_id: !input entity_3

  - choose:
      - conditions:
          - '{{ trigger.entity_id != entity_4 }}'
          - '{{ trigger.to_state.state != states(entity_4) }}'
        sequence:
          - service: >
              {% if trigger.to_state.state == "on" %}
                homeassistant.turn_on
              {% else %}
                homeassistant.turn_off
              {% endif %}
            entity_id: !input entity_4trigger:
  - platform: state
    entity_id: 
      - !input switch_1
      - !input switch_2
      - !input switch_3
      - !input switch_4

mode: single

condition:
  '{{ trigger.to_state.state != trigger.from_state.state }}'

action:
  # Set to target value
  - choose:
    - conditions:
      - '{{ trigger.entity_id != switch_1 }}'
      - '{{ trigger.to_state.state != states(switch_1) }}'
      sequence:
        - service: 'switch.turn_{{ trigger.to_state.state }}'
          entity_id: !input switch_1

  - choose:
    - conditions:
      - '{{ trigger.entity_id != switch_2 }}'
      - '{{ trigger.to_state.state != states(switch_2) }}'
      sequence:
        - service: 'switch.turn_{{ trigger.to_state.state }}'
          entity_id: !input switch_2

  - choose:
    - conditions:
      - '{{ trigger.entity_id != switch_3 }}'
      - '{{ trigger.to_state.state != states(switch_3) }}'
      sequence:
        - service: 'switch.turn_{{ trigger.to_state.state }}'
          entity_id: !input switch_3

  - choose:
    - conditions:
      - '{{ trigger.entity_id != switch_4 }}'
      - '{{ trigger.to_state.state != states(switch_4) }}'
      sequence:
        - service: 'switch.turn_{{ trigger.to_state.state }}'
          entity_id: !input switch_4

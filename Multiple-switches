blueprint:
  name: Synchronize multiple Switches/Lights
  description: >
    ## Bind multiple switches or lights together to act in unison
    ðŸ”¥**Version**: v3.0
  domain: automation
  input:
    entities:
      name: Entities to synchronize
      description: Select two or more switches or lights to act together.
      selector:
        entity:
          domain: switch,light
          multiple: true

trigger:
  - platform: state
    entity_id: !input entities

mode: single

condition:
  '{{ trigger.to_state.state != trigger.from_state.state }}'

action:
  - variables:
      changed_state: '{{ trigger.to_state.state }}'
  - repeat:
      for_each: !input entities
      sequence:
        - choose:
            - conditions:
                - '{{ repeat.item != trigger.entity_id }}'
                - '{{ states(repeat.item) != changed_state }}'
              sequence:
                - service: >
                    {% if changed_state == "on" %}
                      homeassistant.turn_on
                    {% else %}
                      homeassistant.turn_off
                    {% endif %}
                  entity_id: '{{ repeat.item }}'trigger:
  - platform: state
    entity_id: 
      - !input entity_1
      - !input entity_2
      - !input entity_3
      - !input entity_4

mode: single

condition:
  '{{ trigger.to_state.state != trigger.from_state.state }}'

action:
  - choose:
      - conditions:
          - '{{ trigger.entity_id != entity_1 }}'
          - '{{ trigger.to_state.state != states(entity_1) }}'
        sequence:
          - service: >
              {% if trigger.to_state.state == "on" %}
                homeassistant.turn_on
              {% else %}
                homeassistant.turn_off
              {% endif %}
            entity_id: !input entity_1

  - choose:
      - conditions:
          - '{{ trigger.entity_id != entity_2 }}'
          - '{{ trigger.to_state.state != states(entity_2) }}'
        sequence:
          - service: >
              {% if trigger.to_state.state == "on" %}
                homeassistant.turn_on
              {% else %}
                homeassistant.turn_off
              {% endif %}
            entity_id: !input entity_2

  - choose:
      - conditions:
          - '{{ trigger.entity_id != entity_3 }}'
          - '{{ trigger.to_state.state != states(entity_3) }}'
        sequence:
          - service: >
              {% if trigger.to_state.state == "on" %}
                homeassistant.turn_on
              {% else %}
                homeassistant.turn_off
              {% endif %}
            entity_id: !input entity_3

  - choose:
      - conditions:
          - '{{ trigger.entity_id != entity_4 }}'
          - '{{ trigger.to_state.state != states(entity_4) }}'
        sequence:
          - service: >
              {% if trigger.to_state.state == "on" %}
                homeassistant.turn_on
              {% else %}
                homeassistant.turn_off
              {% endif %}
            entity_id: !input entity_4trigger:
  - platform: state
    entity_id: 
      - !input switch_1
      - !input switch_2
      - !input switch_3
      - !input switch_4

mode: single

condition:
  '{{ trigger.to_state.state != trigger.from_state.state }}'

action:
  # Set to target value
  - choose:
    - conditions:
      - '{{ trigger.entity_id != switch_1 }}'
      - '{{ trigger.to_state.state != states(switch_1) }}'
      sequence:
        - service: 'switch.turn_{{ trigger.to_state.state }}'
          entity_id: !input switch_1

  - choose:
    - conditions:
      - '{{ trigger.entity_id != switch_2 }}'
      - '{{ trigger.to_state.state != states(switch_2) }}'
      sequence:
        - service: 'switch.turn_{{ trigger.to_state.state }}'
          entity_id: !input switch_2

  - choose:
    - conditions:
      - '{{ trigger.entity_id != switch_3 }}'
      - '{{ trigger.to_state.state != states(switch_3) }}'
      sequence:
        - service: 'switch.turn_{{ trigger.to_state.state }}'
          entity_id: !input switch_3

  - choose:
    - conditions:
      - '{{ trigger.entity_id != switch_4 }}'
      - '{{ trigger.to_state.state != states(switch_4) }}'
      sequence:
        - service: 'switch.turn_{{ trigger.to_state.state }}'
          entity_id: !input switch_4
